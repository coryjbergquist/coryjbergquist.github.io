<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-02-03T12:13:49-07:00</updated><id>/feed.xml</id><title type="html">What Can We Code Today?</title><subtitle>A coding blog by Cory Bergquist</subtitle><entry><title type="html">Making Routes With React Router Part 2</title><link href="/2019/02/03/making-routes-with-react-router-part-2.html" rel="alternate" type="text/html" title="Making Routes With React Router Part 2" /><published>2019-02-03T00:00:00-07:00</published><updated>2019-02-03T00:00:00-07:00</updated><id>/2019/02/03/making-routes-with-react-router-part-2</id><content type="html" xml:base="/2019/02/03/making-routes-with-react-router-part-2.html">&lt;h3&gt;Creating nested routes and using the history object&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://coryjbergquist.github.io/2018/12/13/making-routes-with-react-router.html&quot;&gt;Click here to read my first article that covers the basics of React Router.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my first article about React Router, I went over making basic routes and having them render certain React components based on the url. In this article I will go a little deeper and talk about nested routes and using React Router’s history object.&lt;/p&gt;

&lt;p&gt;Nested routes go in the parent component. So if we have our main App component that renders a Cars component, we could navigate to the cars component by visiting www.MyCoolApp.com/cars. If I wanted to have a nested list of links that can navigate to certain types of cars, we would put those links in the Cars component.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// inside of the main App component

import React from 'react'
import { Link } from 'react-router-dom'

class Cars extends React.Component {

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;ul&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;Link to={`${match.url}/suv`}&amp;gt;SUV&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;Link to={`${match.url}/sedan`}&amp;gt;Sedan&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;Link to={`${match.url}/convertible`}&amp;gt;Convertible&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
      &amp;lt;/div&amp;gt;
      )
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now lets say we give our users the ability to add a car to their favorites list, and after they do that, we want our application to automatically redirect to the home page. This is where &lt;code class=&quot;highlighter-rouge&quot;&gt;history&lt;/code&gt; comes in.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;addFavorite = (event) =&amp;gt; {
  //fire off the addFavorite action to update our Redux store
  this.props.addFavorite(event);
  //use the history object to redirect to a new url
  this.props.history.push(&quot;/&quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here we are using an action to update the Redux store, adding a user’s favorite car. Next we get the &lt;code class=&quot;highlighter-rouge&quot;&gt;history&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props&lt;/code&gt; and call &lt;code class=&quot;highlighter-rouge&quot;&gt;.push(&quot;/&quot;)&lt;/code&gt; to redirect to the home page. Other options might include redirecting to the users profile page, or perhaps back to the main list of cars.&lt;/p&gt;

&lt;p&gt;React Router can be a lot to take in when you applications start to grow. Nested routes are a great way to build deeper structures in an organized way, but make sure you understand the basics before pushing too far!&lt;/p&gt;</content><author><name></name></author><summary type="html">Creating nested routes and using the history object</summary></entry><entry><title type="html">React And Set State</title><link href="/2019/01/24/React-and-set-State.html" rel="alternate" type="text/html" title="React And Set State" /><published>2019-01-24T00:00:00-07:00</published><updated>2019-01-24T00:00:00-07:00</updated><id>/2019/01/24/React-and-set-State</id><content type="html" xml:base="/2019/01/24/React-and-set-State.html">&lt;h3&gt;What else can setState() offer us?&lt;/h3&gt;

&lt;p&gt;If you’ve done your reading, you know that you shouldn’t directly mutate your state when using React.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/814/1*fUJEYMKcmdHkkm6St7Z4Dg.jpeg&quot; alt=&quot;LOTRState&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;I know everyone uses this image, but it’s funny and it’s a good reminder, so I’m going to use it too!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So we all use setState, we all love setState, setState is GREAT! But we want to flex our brain muscles, so what else can we do with this wonderful method that is built right into the React.Component API?&lt;/p&gt;

&lt;p&gt;First off, &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; is not always synchronous. This can lead to some issues when we’re trying to call a function directly after we change the state of our component. Let’s say you want to &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log(this.state)&lt;/code&gt; directly after you update your component with &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt;. Because &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; is called when it is best for performance, you might end up calling &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; before &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; and end up logging your old state instead of your new state.&lt;/p&gt;

&lt;h4 id=&quot;why-do-you-do-this-to-me&quot;&gt;Why do you do this to me?!?!&lt;/h4&gt;

&lt;p&gt;Luckily &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; comes with an optional callback function:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this.setState(
  {
    names: [&quot;bob&quot;, &quot;jerry&quot;, &quot;steven&quot;]
  },
  function () {console.log(&quot;this will happen after setState() is completed&quot;)}
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;This way, you’ll be able to use your new state directly after &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; is completed. Wooo!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;ok-what-else-you-got&quot;&gt;Ok what else you got?&lt;/h4&gt;

&lt;p&gt;What if we need to update state based on what’s already in the current state? Ex: adding to a list of names. So let’s say we have a list of names: &lt;code class=&quot;highlighter-rouge&quot;&gt;{names: [&quot;bob&quot;, &quot;jerry&quot;, &quot;steven&quot;]}&lt;/code&gt; and we want to add a name to that list. We’re not supposed to mutate our state directly so we can’t just &lt;code class=&quot;highlighter-rouge&quot;&gt;push()&lt;/code&gt; into the &lt;code class=&quot;highlighter-rouge&quot;&gt;names&lt;/code&gt; array. Instead we’ll use a function as the first argument in &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt;. The function can take &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; which will be a reference to the current component state, and &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; which function like any other props. For now we’re just going to pass in &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this.setState((state) =&amp;gt; {
  names: [...state, &quot;Mr. New Name&quot;]
  },
  function () {console.log(&quot;we have now added Mr. New Name&quot;)}
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above code, we’re passing in the current state, and then using the spread operator &lt;code class=&quot;highlighter-rouge&quot;&gt;...state&lt;/code&gt; to add the current elements of the array, along with our “Mr. New Name” into a fresh array.&lt;/p&gt;

&lt;p&gt;Alright! We’ve successfully updated our state without mutating any immutable objects, and hopefully we have a better understanding of what setState is capable of! As a side note, the React docs explain that instead of using the optional callback function in &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; we should instead use &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidUpdate()&lt;/code&gt; which will fire off after a component updates (such as after &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; is completed). So keep that in mind when you’re pushing &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; to its maximum capacity.&lt;/p&gt;</content><author><name></name></author><summary type="html">What else can setState() offer us?</summary></entry><entry><title type="html">Creating For Yourself</title><link href="/2019/01/19/creating-for-yourself.html" rel="alternate" type="text/html" title="Creating For Yourself" /><published>2019-01-19T00:00:00-07:00</published><updated>2019-01-19T00:00:00-07:00</updated><id>/2019/01/19/creating-for-yourself</id><content type="html" xml:base="/2019/01/19/creating-for-yourself.html">&lt;h3&gt;Keep Your Personal Projects Going!&lt;/h3&gt;

&lt;p&gt;Before I follow up on my previous article about making React Routes, I’m going to take a quick sidestep and talk about building for the sake of your own enjoyment.&lt;/p&gt;

&lt;p&gt;If you have willingly spent more than five minutes teaching yourself some sort of coding language, you probably have a sincere passion for creating with code. As a new developer, it’s easy to get swept up into trying to find a job, making sure you have the skills to add value to a company and making sure that you present yourself in a professional manner. But don’t forget to take a step back and code for yourself every now and then.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.pixabay.com/photo/2016/06/09/20/38/woman-1446557_1280.jpg&quot; alt=&quot;ideas&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Like this idea swamped developer in the picture above, there’s probably so many ideas floating around in your head, pick one and run with it, even if it seems silly!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;a-silly-idea-might-be-just-what-you-need-to-keep-pushing-yourself-as-a-developer&quot;&gt;A silly idea might be just what you need to keep pushing yourself as a developer.&lt;/h4&gt;

&lt;p&gt;Even if it’s just laying out a basic &lt;code class=&quot;highlighter-rouge&quot;&gt;NOTES&lt;/code&gt; file in your directory that outlines an idea that you think might be fun or cool. This can be a huge breath of fresh air and renew your drive to continue learning throughout your career in code.&lt;/p&gt;

&lt;p&gt;For me, I decided it would be fun to create a web application that randomly generated a user’s superhero for the day. Similar to how people read their daily horoscopes, this would be a light hearted “give yourself this superhero power boost to help your through the day” type of app.&lt;/p&gt;

&lt;h3 id=&quot;developing-your-own-work-helps-you-dig-deeper-into-any-and-all-problems&quot;&gt;Developing your own work helps you dig deeper into any and all problems.&lt;/h3&gt;

&lt;p&gt;When I first began writing code for this project, I quickly realized that in my previous applications I may have gone too quickly into using Redux without fully appreciating it. I love working with React and it was great to fully work out my idea until I reached a point where it really made sense to move all of my &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; into one place with the Redux &lt;code class=&quot;highlighter-rouge&quot;&gt;store&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The act alone of creating a brand new application is great practice for keeping your knowledge fresh. I definitely had to go back and look up a few JavaScript best practices.&lt;/p&gt;

&lt;h3 id=&quot;something-i-can-always-come-back-to&quot;&gt;Something I can always come back to.&lt;/h3&gt;

&lt;p&gt;Even if I am unable to finish this application right away, it’s great to know that I have something fun that I can open up and make a few git commits to whenever I’m up for a challenge.&lt;/p&gt;

&lt;p&gt;After about a year of pushing myself to the max and learning everything I possibly can, the simple task of typing &lt;code class=&quot;highlighter-rouge&quot;&gt;npx create-react-app random-superhero&lt;/code&gt; and starting to build something just for fun has really given me a jumpstart in my motivation to keep learning, and keep the curiousity alive.&lt;/p&gt;

&lt;h3 id=&quot;keep-coding-fun&quot;&gt;Keep coding fun!&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.pixabay.com/photo/2017/07/21/23/57/concert-2527495_1280.jpg&quot; alt=&quot;cofetti&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Blow some bubbles, throw some cofetti, make some noise and keep coding fun!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">Keep Your Personal Projects Going!</summary></entry><entry><title type="html">Making Routes With React Router</title><link href="/2018/12/13/making-routes-with-react-router.html" rel="alternate" type="text/html" title="Making Routes With React Router" /><published>2018-12-13T00:00:00-07:00</published><updated>2018-12-13T00:00:00-07:00</updated><id>/2018/12/13/making-routes-with-react-router</id><content type="html" xml:base="/2018/12/13/making-routes-with-react-router.html">&lt;h3&gt;My single page application is great, but I want more!&lt;/h3&gt;

&lt;p&gt;We all love using React and Redux, but what happens when we get tired of our URL constantly sitting at “rockin-website.com/index” regardless of what sort of content we’re viewing? Enter React Router!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I feel like React Routes can get a little overwhelming when adding it to a potentially already complex application, so I’m going to break this down into at least two articles, this first article being focused on a quick intro to get some basic functionality across&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We’ll start by importing a few basic things into our file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React from 'react'
import Provider from 'react-redux'
import { BrowserRouter as Router, Switch, Route } from 'react-router-dom'


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Provider gives us access to the Redux store, BrowserRouter (which we’ll be using as Router) will be the parent to all of our other routes and will hold a history object, Switch allows us to choose between several routes, and Route is what we’ll use to decide what component we want to render when we type in a certain URL.&lt;/p&gt;

&lt;p&gt;Here is an example of using all of those can look like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React from 'react'
import Provider from 'react-redux'
import { BrowserRouter as Router, Switch, Route } from 'react-router-dom'

import AllLists from './AllLists'
import CatList from './CatList'
import FoodList from './FoodList'

class MyListRouter extends React.Component {

  render() {
    return (
      &amp;lt;Router&amp;gt;
        &amp;lt;Switch&amp;gt;
          &amp;lt;Route exact path='/' component={ AllLists }
          &amp;lt;Route path='/catlist' component={ CatList }
          &amp;lt;Route path='/foodlist' component={ FoodList }
        &amp;lt;/Switch&amp;gt;
      &amp;lt;/BrowserRouter&amp;gt;
      )
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the above code we use our Router (which is the BrowserRouter) to wrap the our Switch and also each Route. In the the path prop of each Route we specify the URL that we are looking for, and in the component prop, we specify which component we want to render, when the URL matches that path prop.&lt;/p&gt;

&lt;p&gt;In my next blog we’ll cover nested routes and using the history to redirect the user after certain actions.&lt;/p&gt;</content><author><name></name></author><summary type="html">My single page application is great, but I want more!</summary></entry><entry><title type="html">React Container And Presentational Components</title><link href="/2018/12/06/react-container-and-presentational-components.html" rel="alternate" type="text/html" title="React Container And Presentational Components" /><published>2018-12-06T00:00:00-07:00</published><updated>2018-12-06T00:00:00-07:00</updated><id>/2018/12/06/react-container-and-presentational-components</id><content type="html" xml:base="/2018/12/06/react-container-and-presentational-components.html">&lt;h3&gt;If we're going to follow best coding practices, then we better separate our concerns.&lt;/h3&gt;

&lt;p&gt;When working with an MVC (model view controller) pattern, it’s pretty common to use a restaurant example. The chef is the model, they get the food (data), the waiter is the controller, they take orders (user input), and the table is the view, it holds the food for you to see. Using this architecture our code has a separation of concerns so if we need to change one element, it has much less of a chance to ruin the other parts of our project. Changing the view shouldn’t spring up any problems with your model or controller.&lt;/p&gt;

&lt;h3&gt;When using React/Redux&lt;/h3&gt;
&lt;p&gt;While setting up components, keeping this restaurant analogy in mind can be pretty beneficial. Our Redux store will be our chef (he has all the food), our container component can be considered the waiter who gets information from the store, and our presentational component (preferably a stateless functional component), not surprisingly, can be considered the restaurant table that presents the food.&lt;/p&gt;

&lt;p&gt;Keeping the container component, which is responsible for getting the data (usually by utilizing Redux’s &lt;code class=&quot;highlighter-rouge&quot;&gt;connect&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt;), separate from the presentational component will keep our code much cleaner and easier to debug when problems arise.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React from 'react';
import Sound from './Sound'
import { connect } from 'react-redux';

class SoundsList extends React.Component {

  //adding a Sounds component for each sound in props
  renderSounds = this.props.stateSounds.sounds.map((sound) =&amp;gt;
  &amp;lt;div key ={sound.id}&amp;gt;
    &amp;lt;Sound sound={sound} /&amp;gt;
    &amp;lt;/div&amp;gt;
  )

  render(){
    return (
      &amp;lt;ul&amp;gt;

        {this.renderSounds}

      &amp;lt;/ul&amp;gt;
    )
  }
}

const mapStateToProps = state =&amp;gt; ({stateSounds: state.sounds})

export default connect(mapStateToProps)(SoundsList);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;In the above code, we have a SoundsList component that is using mapStateToProps to get a list of sounds from the Redux store, then uses renderSounds and map to render the Sound component (which is a presentational component) for each sound that we get from the store.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Seeing the code above, we get an idea what will happen in our web app, we don’t even need to know exactly what is happening in the Sound component, all we need to do is pass it the correct props and we’re good to go. If either component fails, we’ll have a much easier time figuring out where the error is, compared to if we had both components squashed together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.sterlingsheehy.com/images/2011/12/ugly-wordpress-coding-habbits.jpg&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Nobody wants code that looks like this!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Separation of concerns is very common in development, however, I’m sure plenty of us have been guilty of throwing everything in one giant file when starting a new project. Keeping these simple patterns in mind when laying out the basic structure of an application can save us a lot of future headaches!&lt;/p&gt;</content><author><name></name></author><summary type="html">If we're going to follow best coding practices, then we better separate our concerns.</summary></entry><entry><title type="html">React Redux Updating Store With Actions</title><link href="/2018/12/01/react-redux-updating-store-with-actions.html" rel="alternate" type="text/html" title="React Redux Updating Store With Actions" /><published>2018-12-01T00:00:00-07:00</published><updated>2018-12-01T00:00:00-07:00</updated><id>/2018/12/01/react-redux-updating-store-with-actions</id><content type="html" xml:base="/2018/12/01/react-redux-updating-store-with-actions.html">&lt;h3&gt;There can be quite a bit happening during an update of your Redux store, here's a quick example to help make sense of the major steps.&lt;/h3&gt;

&lt;p&gt;I’m going to keep this article specific to updating the Redux store, so to begin, we’ll assume that you have some knowledge of Redux, React, JavaScript, and that you have these things already up and running. Ok, let’s get to it!&lt;/p&gt;

&lt;p&gt;We need a Redux store, let’s say it’s a list of books, and we’ll get it through assigning default settings in our books_reducer.js file (which holds our booksReducer function).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export default function booksReducer(state= {
  books: [“The Big Book of JavaScript”, “React and Redux, a Love Story”, “H4x for Cats”],
}, action) {
  Switch ( action.type ) {

  case ‘FETCH_BOOKS’:
        return { ...state, books: action.payload}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;In the above code, we have a switch statement that uses action.type as an expression, and the case for ‘FETCH_BOOKS’ could be used with an action that receives data from an API.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We create our Redux store, inside of our “index.js” file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const store = createStore(rootReducer, applyMiddleware(thunk));

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;“rootReducer” is imported at the top of our file and is used to combine multiple reducers into one object. “Thunk” in “applyMiddleware(thunk)”, allows us to create action creators that return functions.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To change our store, we’ll use our booksReducer, and we’ll need to dispatch an action.&lt;/p&gt;

&lt;p&gt;Actions contain the key: “type” which dictates what the switch statement in your reducer will match to. Now we’ll make a function that dispatches an action to add a book to our list of books.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  function addBook() {
    return dispatch =&amp;gt; {
      dispatch({type: 'ADD_BOOK', payload: &quot;Star Wars: A New Book&quot;};
    };
  }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Dispatch takes an action, then sets state to whatever your reducer returns. The reducer is called within dispatch and gets the action from dispatch, and receives the data placed in “payload”.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next we’ll add a switch case for ‘ADD_BOOK’ so that our reducer can add the new book.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export default function booksReducer(state= {
  books: [“This Big Book of JavaScript”, “React and Redux, a Love Story”, “H4x for Cats”],
}, action) {
  Switch ( action.type ) {

  Case ‘ADD_BOOK’:
        return { ...state, books: action.payload }

  case ‘FETCH_BOOKS’:
        return { ...state, books: action.payload }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will call addBook(), most likely with data from the state of a component that has an input form to add new items, and if everything goes according to plan, our Redux store will be updated with our new book!&lt;/p&gt;</content><author><name></name></author><summary type="html">There can be quite a bit happening during an update of your Redux store, here's a quick example to help make sense of the major steps.</summary></entry><entry><title type="html">React Hoisting State</title><link href="/2018/11/25/react-hoisting-state.html" rel="alternate" type="text/html" title="React Hoisting State" /><published>2018-11-25T00:00:00-07:00</published><updated>2018-11-25T00:00:00-07:00</updated><id>/2018/11/25/react-hoisting-state</id><content type="html" xml:base="/2018/11/25/react-hoisting-state.html">&lt;h3&gt;A bit different from hoisting variables in JavaScript, but still focusing on how you pass information throughout your program.&lt;/h3&gt;

&lt;p&gt;State is a user defined JavaScript object that contains data specific to that component. What happens when we want the information from one component’s state accessible in another component?&lt;/p&gt;

&lt;p&gt;Let’s say we want to show a list of names, but we don’t want the component that displays the names to be responsible for fetching the names. We can create a container component that works like a parent to the child component (which has the code to display the list of names). In the code below, our container component (myComponent) will call an API to get a list of names, assign those names to the state of myComponent, and then pass those names to the AllNames child component (also called a presentational component because it’s job is to render HTML).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import react from 'react'
import AllNames from 'AllNames'

export class myComponent extends React.Component {
  constructor(props) {
    super(props)
    this.state = {names: []}
  }
  componentDidMount() {
    //the getNames() function would call an API that has all the names
    const names = getNames()
    this.setState({names})
  }

  render() {
    const {names} = this.state
    return(
      &amp;lt;div&amp;gt;
      &amp;lt;AllNames allNames={names} /&amp;gt;
      &amp;lt;/div&amp;gt;
      )
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bonus: If the data can be passed in through props, it doesn’t need to be in the state of the child component.&lt;/p&gt;

&lt;p&gt;When hoisting state in React, a parent (container) component can make a call to an API to set state, then pass the state into the child component via props so that the child components can be stateless pure functions. (ex. returning a div with the information from props).&lt;/p&gt;</content><author><name></name></author><summary type="html">A bit different from hoisting variables in JavaScript, but still focusing on how you pass information throughout your program.</summary></entry><entry><title type="html">React Redux Sound Organizer</title><link href="/2018/11/10/react-redux-sound-organizer.html" rel="alternate" type="text/html" title="React Redux Sound Organizer" /><published>2018-11-10T00:00:00-07:00</published><updated>2018-11-10T00:00:00-07:00</updated><id>/2018/11/10/react-redux-sound-organizer</id><content type="html" xml:base="/2018/11/10/react-redux-sound-organizer.html">&lt;h3&gt; There's no kind of learning like building from scratch! &lt;/h3&gt;

&lt;p&gt;I have to admit, I stumbled quite a bit while learning React and Redux. Between learning a new style of coding and trying to keep track of exactly where the line was between JavaScript, React and Redux, there was a lot to take it. Throughout the entire progress I kept to one simple idea that kept me going: any progress is better than no progress. As long as I could dedicate some of my day to learning and completing a few lessons, then I could be confident that I was still moving forward.&lt;/p&gt;

&lt;p&gt;This project is made for creating small sound clips and storing them for later. Sort of like an idea notebook meant specifically for musicians, singers, or anyone who uses sounds to create something. A user can make a sound name, and description, which will be stored on a rails API. A user can also come back to that sound and make comments or delete the sound.&lt;/p&gt;

&lt;p&gt;While building this application, I was fresh off of several lessons about React and Redux, so I was happily excited to really get a deeper understanding of how to get the front end working just how I wanted. It took me a bit of extra reading, but I was able to get a smooth flow of creating sounds, descriptions and comments, updating my Redux store through actions and adding a root Reducer to hold any extra reducers I might create later.&lt;/p&gt;

&lt;p&gt;The biggest problem I ran into was learning how to hook up my front end with my rails API. It took several articles and videos for me to realize that I was making things much too complicated and that my rails back end only had to be a host for my database and really nothing more. Thanks especially to my Flatiron community that came through in Slack and pointed me in the direction of a couple great videos and talked me through how I needed to get my rails API to function. Several more videos and articles later I was able to feel pretty comfortable sending different types of requests using fetch() in my actions.&lt;/p&gt;

&lt;p&gt;There’s really no better way to learn than by building your own applications and I can’t wait to get started on the next one!&lt;/p&gt;</content><author><name></name></author><summary type="html">There's no kind of learning like building from scratch!</summary></entry><entry><title type="html">Javascript Context And This</title><link href="/2018/10/15/javascript-context-and-this.html" rel="alternate" type="text/html" title="Javascript Context And This" /><published>2018-10-15T00:00:00-07:00</published><updated>2018-10-15T00:00:00-07:00</updated><id>/2018/10/15/javascript-context-and-this</id><content type="html" xml:base="/2018/10/15/javascript-context-and-this.html">&lt;h3&gt; We Use &quot;this&quot; in JavaScript to reference the subject of the code that we're executing. &lt;/h3&gt;

&lt;p&gt;Context in JavaScript refers to the object that a function belongs to. A big part of those functions can often be the use of “this”.&lt;/p&gt;

&lt;p&gt;In the sentence: “John likes coding, he is learning to code right now.” We can think of the “he” as the “this” in our JavaScript code.&lt;/p&gt;

&lt;p&gt;Using “this” can help make our code less prone to errors and more abstract, for example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var donut = {
  name: &quot;ChocoGoodness&quot;,
  flavor: &quot;Chocolate&quot;,
  describeDonut: function () {
    console.log(this.name + &quot; is &quot; + this.flavor + &quot; flavored.&quot;)
	}
}

donut.describeDonut()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above code, saying “this.name” is the same as saying “donut.name”, but this way we are being more abstract and can potentially use our function later without too much effort.&lt;/p&gt;

&lt;h3&gt; Using &quot;this&quot; in your functions &lt;/h3&gt;

&lt;h4&gt; &quot;this&quot; will have the value of the object that invokes the function that &quot;this&quot; is in. &lt;/h4&gt;

&lt;p&gt;You can use “this” in simple functions like the code above: &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log(this.name)&lt;/code&gt;, and also when borrowing functions from one object to another. When you do this, you need to make sure that the object you are referencing is the current one. For example:&lt;/p&gt;

&lt;p&gt;Let’s say we have two objects, one called “iceCream” and one called “baseballPlayer”. We are going to define a function in “iceCream” that we also want to use in our “baseball” object.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var iceCream = {
  name: &quot;Caramel Monster Crunch&quot;,
	showName: function () {
	  console.log(this.name);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4&gt; Bind assigns &quot;this&quot; to the object you want, but does not automatically call the function. &lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var   iceCreamNameFunction = iceCream.showName.bind(iceCream);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When we call &lt;code class=&quot;highlighter-rouge&quot;&gt;iceCream.nameFunction()&lt;/code&gt; we’ll get “Caramel Monster Crunch” in our console. Since “iceCreamNameFunction” is in global scope, if we did not use the “.bind(iceCream)”, the “this” that is inside of our “showName” function would be in global scope (which is the “window” object) because “this” always gets the value of the object that it gets invoked inside of.&lt;/p&gt;

&lt;p&gt;Now we want to use that same “nameFunction()” in our baseballPlayer object.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var baseballPlayer = {
  name: &quot;Johnny Baseball&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var baseballPlayerNameFunction = iceCream.showName.bind(baseballPlayer);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can use the function that we made inside of our iceCream object, but we have to bind it to the “baseballPlayer” object so that “this” will have access to the correct object.&lt;/p&gt;

&lt;h3&gt; We can also use either call() or apply() instead of bind(). &lt;/h3&gt;

&lt;h4&gt; call() is similar to bind, but it is used to call that function right away without needing to assign it to anything. &lt;/h4&gt;

&lt;p&gt;Let’s say we had a global variable called “name” and also an object called “baseballPlayer” that has a property of “name”.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var name = &quot;this is in global scope&quot;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var baseballPlayer = {
  name: &quot;Johnny Baseball&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we want to make a function that gives us the name of our baseballPlayer. This is also in global scope.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var showName = function() {
  console.log(this.name)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But how does “showName” now what “this” is? Easy, we just use the “call()” function when were using our “showName” function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;showName.call(baseballPlayer)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we have explicitly told “showName” that we want it to be called with the object as “baseballPlayer”. If we didn’t do this, we would get our global variable which puts “this is in global scope” to our console.&lt;/p&gt;

&lt;p&gt;Using “apply()” is very similar to “call()”, the difference being, when you use “apply()” you pass in arguments as an array instead of one at a time.&lt;/p&gt;</content><author><name></name></author><summary type="html">We Use &quot;this&quot; in JavaScript to reference the subject of the code that we're executing.</summary></entry><entry><title type="html">Rails With Javascript</title><link href="/2018/10/05/rails-with-javascript.html" rel="alternate" type="text/html" title="Rails With Javascript" /><published>2018-10-05T00:00:00-07:00</published><updated>2018-10-05T00:00:00-07:00</updated><id>/2018/10/05/rails-with-javascript</id><content type="html" xml:base="/2018/10/05/rails-with-javascript.html">&lt;h3&gt; Learning a new skill is tough, but rewarding. With coding I am able to learn new skills everyday which gives me an amazing sense of accomplishment every time I conquer a new task. &lt;/h3&gt;

&lt;p&gt;Starting on this project allowed me to really grasp the power of combining Rails and JavaScript. I understood the basics of JS, how to create functions and objects, how scope works and where functions need to be to have access to other functions, but combining them with a working Rails application opened up a whole new set of doors.&lt;/p&gt;

&lt;p&gt;I revisited my project for an application where a user can create an account and then create reviews for movies that include title, content, and rating (out of 5). The main focus of this version of the project was to use JavaScript, AJAX and jQuery to render data without having to perform a full page refresh every time. After my initial surprise and excitement from learning that such a thing was even possible, I dove into the specifics for my app. Building your own application using these methods is a great way to get a solid grasp of how they work and what they’re capable of.&lt;/p&gt;

&lt;p&gt;One issue I had was realizing how simple the jQuery/AJAX requests really could be. How data that was being supplied through the AJAX request was confusing to me at first until I realized the pattern was simply using the routes you provided in rails, hitting the controller to get data, and then giving that data to the script in the view page. Once I could wrap my head around the relative simplicity of this action, everything began to make a lot more sense.&lt;/p&gt;

&lt;p&gt;Another issue I had actually ended up being fantastic practice for remember what language I am programming in. Switching between Ruby, JS, HTML, and also remembering the correct jQuery syntax, wasn’t frustrating in the slightest (even when I made mistakes). It turned out to be a really eye opening exercise that gave me a lot of confidence in being able to quickly move from one language to another without any real burden on my thought flow.&lt;/p&gt;

&lt;p&gt;As I have the new functionality of my application working, I am even more excited for my future coding projects!&lt;/p&gt;</content><author><name></name></author><summary type="html">Learning a new skill is tough, but rewarding. With coding I am able to learn new skills everyday which gives me an amazing sense of accomplishment every time I conquer a new task.</summary></entry></feed>